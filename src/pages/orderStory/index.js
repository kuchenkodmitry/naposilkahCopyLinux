import React, { useEffect, useState } from 'react';
import Cookies from 'js-cookie';
import styles from './style.module.css';
import { QRCodeCanvas } from "qrcode.react";
import { useNavigate } from 'react-router-dom';
import { fetchOrders as fetchOrdersApi, searchOrders as searchOrdersApi } from '../../api/api'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API-—Ñ—É–Ω–∫—Ü–∏–∏
import dayjs from 'dayjs';
import DeliveryPack from '../../data/boxes.json'

const boxes = DeliveryPack

const HistoryForm = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [page, setPage] = useState(1);
    const [hasMore, setHasMore] = useState(true);
    const [searchQuery, setSearchQuery] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [expandedOrder, setExpandedOrder] = useState(null);

    const telegramId = Cookies.get('telegram_id');
    const authToken = Cookies.get('auth_token');
    const navigate = useNavigate();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
    const fetchOrders = async (page) => {
        if (!telegramId || !authToken) {
            setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
            setLoading(false);
            return;
        }

        try {
            const data = await fetchOrdersApi(telegramId, authToken, page);
            if (data.results && data.results.length === 0) {
                setHasMore(false);
            } else {
                const sortedOrders = data.results.sort((a, b) => b.id - a.id);
                setOrders(prevOrders => [...prevOrders, ...sortedOrders]);
            }
            setLoading(false);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
            setLoading(false);
        }
    };

    // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
    const searchOrders = async (query) => {
        if (!telegramId || !authToken) return;

        setLoading(true);
        setIsSearching(true);

        try {
            const data = await searchOrdersApi(telegramId, authToken, query);
            setOrders(data || []);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
        } finally {
            setLoading(false);
        }
    };

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (!telegramId || !authToken) {
            setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
            setLoading(false);
            return;
        }
        fetchOrders(page);
    }, [telegramId, authToken, page]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const handleSearch = (event) => {
        const value = event.target.value.trim();
        setSearchQuery(value);

        if (value === '') {
            setIsSearching(false);
            setOrders([]);
            setPage(1);
            fetchOrders(1);
        } else {
            searchOrders(value);
        }
    };

    return (
        <div className={styles.container}>
            {/* –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            <div className={styles.header}>
                <div className={styles.searchBar}>
                    <input
                        className={styles.input}
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                        value={searchQuery}
                        onChange={handleSearch}
                    />
                    <span className={styles.searchIcon}>üîç</span>
                </div>
            </div>
            {isSearching && (
                <button
                    className={styles.resetButton}
                    onClick={() => {
                        setSearchQuery('');
                        setIsSearching(false);
                        setOrders([]);
                        setPage(1);
                        fetchOrders(1);
                    }}
                >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
                </button>
            )}
            {isSearching ? <h3 className={styles.part}>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞</h3> : <h3 className={styles.part}>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π</h3>}
            <ul className={styles.orderList}>
                {orders.length > 0 ? (
                    orders.map(order => (
                        <li key={order.id} className={styles.orderItem}>
                            <strong>–ó–∞–∫–∞–∑ ‚Ññ{order.order_id || ' –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω'}</strong>
                            <div className={styles.orderDetails}>
                                –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at != null ? dayjs(order.created_at).format('DD.MM.YYYY HH:mm:ss') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π'} <br />
                                –†–∞–∑–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏: {order.company != null ? boxes[order.company]?.map((e) => {
                                    if (order.dimensions == e.value) {
                                        return e.label
                                    }
                                }) : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} <br />
                                –í–µ—Å –ø–æ—Å—ã–ª–∫–∏: {order.weight != null ? (order.weight + " –≥—Ä–∞–º–º") : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} <br />
                                –¢–∏–ø –≤—ã–¥–∞—á–∏: {order.issue ? order.issue : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} <br />
                                –¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—ã–ª–∫–∏: {order.declared_price != null ? (order.declared_price + " —Ä—É–±.") : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} <br />
                                –°—Ç–∞—Ç—É—Å: {order.status || '–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω'} <br />
                                –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {order.price || '0'} —Ä—É–±. <br />
                                –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {order.track_number || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} <br />
                            </div>
                            {order.qr_code && (
                                <>
                                    <button className={styles.toggleButton}
                                        onClick={() => navigate(`/order/${order.id}`)}
                                    >
                                        –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                    </button>
                                    {expandedOrder === order.id && (
                                        <div className={styles.qrCodeContainer}>
                                            <QRCodeCanvas value={order.label_url} size={200} />
                                        </div>
                                    )}
                                </>
                            )}
                        </li>
                    ))
                ) : (
                    <li className={styles.noResults}>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
                )}
                {loading && <li className={styles.loader}>–ó–∞–≥—Ä—É–∑–∫–∞...</li>}
            </ul>
        </div>
    );
};

export default HistoryForm;