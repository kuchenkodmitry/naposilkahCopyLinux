import './App.css';
import { lazy, Suspense } from 'react';
import { Route, Routes, useLocation, useNavigate } from 'react-router-dom';
import { AnimatePresence, motion } from 'framer-motion';
import useTelegramAuth from "./components/auth/telegramAuth";
import { useState, useEffect } from "react";
import Cookies from 'js-cookie';
import AppBar from './components/Appbar/index';
import logo from "./assets/image/logo.png";
import styles from './pages/main/style.module.css';
import History from './pages/orderStory/index'
import Rules from './pages/rules/index'
import OrderDetails from './pages/orderDetails';
import BoxberryTrack from './pages/traking';
import { ClipLoader } from 'react-spinners';
import FAQ from './pages/faq/index'
import About from "./pages/about/index"
import Round from './assets/image/svg/round.svg'
import { sendAuthData, fetchFAQData as fetchFAQDataApi } from './api/api'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api.js


// –õ–µ–Ω–∏–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const Main = lazy(() => import('./pages/main/index'));
const Choice = lazy(() => import('./pages/choice'));
const CalculateCost = lazy(() => import('./pages/calculateCost'));
const OrderInfo = lazy(() => import('./components/orderInfo/index'));
const OrderCompleted = lazy(() => import('./pages/OrderCompleted'));

function App() {
  const { authData: telegramAuthData } = useTelegramAuth();
  const [authStatus, setAuthStatus] = useState('loading'); // 'loading', 'success', 'error'
  const [isTimeout, setIsTimeout] = useState(false); // –ù–æ–≤—ã–π —Å—Ç–µ–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
  const [errorMessage, setErrorMessage] = useState("");
  const [dataAuthErr, setDataAuthErr] = useState("");
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    let timeoutId;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App
    const checkTelegramWebApp = () => {
      if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;

        // –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WebApp
        tg.ready();

        const initData = tg.initData;
        if (!initData) {
          console.log('–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram –∏–ª–∏ initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          setAuthStatus('error');
          setErrorMessage('–û—à–∏–±–∫–∞ –≤ –º–æ–º–µ–Ω—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ initData');
        } else {
          console.log('–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram');
          console.log('–î–∞–Ω–Ω—ã–µ initData:', initData);
          setErrorMessage('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram');
          // setAuthData(initData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º initData –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }
      } else {
        console.log('–û–±—ä–µ–∫—Ç Telegram.WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
        setAuthStatus('error');
        setErrorMessage('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    timeoutId = setTimeout(() => {
      if (authStatus === 'loading') {
        setIsTimeout(true);
        setAuthStatus('error');
        setErrorMessage((prev) => prev + ' –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫');
      }
    }, 10000);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const sendDataToServer = async (retries = 3) => {
      setErrorMessage('–ñ–¥—ë—Ç authData');

      if (!telegramAuthData) {
        console.log('authData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ...');
        return;
      }

      setErrorMessage('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω');
      if (Cookies.get('auth_token')) {
        setAuthStatus('success');
        clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        return;
      }

      try {
        setErrorMessage('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
        const data = await sendAuthData({ initData: telegramAuthData }).catch((err) => {
          console.error('–û—à–∏–±–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', err);
          setErrorMessage(err.message || '–û—à–∏–±–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞');
          throw err;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç auth_token
        if (data && data.auth_token) {
          setAuthStatus('success');
          Cookies.set('auth_token', data.auth_token, { expires: 7, secure: true });
          console.log('–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', data.auth_token);
          console.log('Telegram Auth Data:', window.Telegram.WebApp.initDataUnsafe);
          Cookies.set('telegram_id', window.Telegram.WebApp.initDataUnsafe.user.id);
          clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        } else {
          console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç auth_token:', data);
          setAuthStatus('error');
          setErrorMessage(errorMessage + ' –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: auth_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);

        if (retries > 0) {
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (${retries})...`);
          sendDataToServer(retries - 1); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        } else {
          setAuthStatus('error');
          setErrorMessage(errorMessage + ' Error –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ catch: ' + error.message);
        }
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö FAQ
    const fetchFAQData = async () => {
      try {
        const token = Cookies.get('auth_token');

        if (!token) {
          sendDataToServer();
          return;
        }

        const data = await fetchFAQDataApi(token);
        console.log('====================================');
        console.log(data);
        setAuthStatus('success');
        clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log('====================================');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö FAQ:', error);
        if (error.message === 'Network Error') {
          setErrorMessage('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        } else {
          setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö FAQ: ' + error.message);
        }
        Cookies.remove('auth_token');
        Cookies.remove('telegram_id');
        console.log('–ö—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤');
        sendDataToServer();
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
    checkTelegramWebApp();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö FAQ
    fetchFAQData();

    return () => {
      clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  }, [telegramAuthData]);

  const pageVariants = {
    initial: { opacity: 0, x: -20 },
    animate: { opacity: 1, x: 0, transition: { duration: 0.4 } },
    exit: { opacity: 0, x: 20, transition: { duration: 0.3 } },
  };

  return (
    <div className={styles.container}>
      <img className={styles.decorBackground1} src={Round} />
      <img className={styles.decorBackground2} src={Round} />
      {/* {location.pathname} */}
      <div style={{
        position: 'absolute',
        bottom: '10px',
        zIndex: 1000
      }}>
        <p style={{ color: 'green', width: 300 }}>{dataAuthErr}</p>
        <p style={{ color: "red" }}>{errorMessage}</p>
        <p style={{ color: "red" }}>{isTimeout}</p>
        <p style={{ color: "red" }}>{authStatus}</p>
      </div>
      <img onClick={() => { navigate('/') }} className={styles.logoImg} src={logo} alt="–õ–æ–≥–æ—Ç–∏–ø" />
      <div className={styles.menuContainer}>
        <Suspense fallback={
          <div className={styles.loadingContainer}>
            <ClipLoader
              color="#36d7b7" // –¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
              size={50}       // –†–∞–∑–º–µ—Ä (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
              loading={true}  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            />
          </div>
        }>
          <AnimatePresence mode="wait">
            <Routes location={location} key={location.pathname}>
              <Route
                path="/"
                element={
                  <motion.div
                    initial="initial"
                    animate="animate"
                    exit="exit"
                    variants={pageVariants}
                  >
                    {authStatus === 'loading' ? (
                      <p className={styles.loadingText + ' ' + styles.loadingAnimation}>‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
                    ) : authStatus === 'error' || isTimeout ? (
                      <div className={styles.errorContainer}>
                        <p className={styles.errorText}>üö´ –í–æ–π—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram</p>
                        <a
                          href="https://t.me/naposilkah_bot"
                          target="_blank"
                          rel="noopener noreferrer"
                          className={styles.telegramButton}
                        >
                          —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç <b>üì¶–ù–ê –ü–û–°–´–õ–ö–ê–•üì¶</b>
                        </a>

                      </div>
                    ) : (
                      <Main />
                    )}
                  </motion.div>
                }
              />
              <Route
                path="/choice"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <Choice />
                  </motion.div>
                }
              />
              <Route
                path="/boxberry"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <CalculateCost />
                  </motion.div>
                }
              />
              <Route
                path="/cdek"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <CalculateCost />
                  </motion.div>
                }
              />
              <Route
                path='/orderinfo'
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <OrderInfo />
                  </motion.div>
                }
              />
              <Route
                path='/faq'
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <FAQ />
                  </motion.div>
                }
              />
              <Route
                path='/about'
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <About />
                  </motion.div>
                }
              />
              <Route
                path='/trackBoxberry'
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <BoxberryTrack />
                  </motion.div>
                }
              />
              <Route
                path="/confirm_order/:param"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <OrderCompleted />
                  </motion.div>
                }
              />
              <Route
                path="/history"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <History />
                  </motion.div>
                }
              />
              <Route
                path="/rules"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <Rules />
                  </motion.div>
                }
              />
              <Route
                path="/order/:id"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <OrderDetails />
                  </motion.div>
                }
              />
              <Route
                path="*"
                element={
                  <motion.div initial="initial" animate="animate" exit="exit" variants={pageVariants}>
                    <h1>404</h1>
                  </motion.div>
                }
              />
            </Routes>
          </AnimatePresence>
        </Suspense>
        {location.pathname !== '/' && <AppBar />}
      </div>
    </div>
  );
}

export default App;